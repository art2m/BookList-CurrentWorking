// BookListCurrent
//
// LocationTopLevelDirectoryPath.cs
//
// art2m
//
// art2m
//
// 07    20   2020
//
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>

namespace BookListCurrent.Classes
{
    using System.Windows.Forms;
    using ClassesProperties;

    /// <summary>
    ///     Gets the path to the toplevel BookList directory if exists. If it does
    ///     not exist then the user will be asked to permit it being created. If
    ///     allowed the directory will then be created and its path saved.
    /// </summary>
    public class LocationTopLevelDirectoryPath
    {
        /// <summary>
        /// Locate the top level directory BookList.
        /// </summary>
        /// <returns> True if located successfully else false.</returns>
        // ReSharper disable once MemberCanBeMadeStatic.Global
        public bool GetTopLevelDirectoryPath()
        {
            var dirFileOp = new DirectoryFileClass();
            var validate = new ValidationClass();

            var dirName = BookListPaths.NameTopLevelDirectory;
            var dirAppPath = BookListPaths.PathAppDataDirectory;

            if (!dirFileOp.GetPathToSpecialDirectoryAppDataLocal()) return false;
            if (!validate.ValidateStringNotNullHasLength(dirAppPath)) return false;
            if (!validate.ValidateStringNotNullHasLength(dirName)) return false;

            var dirPath = dirFileOp.CombineExistingDirectoryPathWithDirectoryName(
                dirAppPath, dirName);

            var dirExists = validate.ValidateDirectoryExists(dirPath);

            if (!dirExists)
            {
                var retVal = CreateDirectory(dirPath, dirAppPath, dirName);

                if (!retVal)
                {
                    BookListPaths.PathTopLevelDirectory = dirPath;
                    return false;
                }

                BookListPaths.PathTopLevelDirectory = dirPath;
                return true;
            }

            BookListPaths.PathTopLevelDirectory = dirPath;
            return true;
        }

        /// <summary>
        /// This directory is required so offer to create the directory.
        /// </summary>
        /// <param name="dirAppPath"> Path to local app directory.</param>
        /// <param name="dirName"> Name of the top level directory.</param>
        /// <returns></returns>
        private static bool CreateDirectory(string dirPath, string dirAppPath, string dirName)
        {
            var msgBox = new MyMessageBox();
            var dirFileOp = new DirectoryFileClass();
            var validate = new ValidationClass();

            var dlgResult = msgBox.ShowQuestionMessageBox();

            // Create directory if it does not exist.
            if (dlgResult == DialogResult.Yes)
            {
                dirPath = dirFileOp.CombineDirectoryPathFileNameCheckCreateFile(dirAppPath, dirName);

                if (validate.ValidateDirectoryExists(dirPath))
                {
                    BookListPaths.PathTopLevelDirectory = dirPath;
                    return true;
                }
                else
                {
                    dirPath = string.Empty;
                    // return no directory created.
                    BookListPaths.PathTopLevelDirectory = dirPath;
                    return false;
                }
            }

            // return user does not want to create the directory.
            dirPath = string.Empty;
            BookListPaths.PathTopLevelDirectory = dirPath;
            return false;
        }
    }
}